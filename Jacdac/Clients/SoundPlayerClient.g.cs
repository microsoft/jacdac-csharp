/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A device that can play various sounds stored locally. This service is typically paired with a ``storage`` service for storing sounds.
    /// Implements a client for the Sound player service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/soundplayer/" />
    public partial class SoundPlayerClient : Client
    {
        public SoundPlayerClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.SoundPlayer)
        {
        }

        /// <summary>
        /// Tries to read the <c>volume</c> register value.
        /// Global volume of the output. ``0`` means completely off. This volume is mixed with each play volumes., _: /
        /// </summary>
        bool TryGetVolume(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)SoundPlayerReg.Volume, SoundPlayerRegPack.Volume, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the volume value
        /// </summary>
        public void SetVolume(float value)
        {
            this.SetRegisterValue((ushort)SoundPlayerReg.Volume, SoundPlayerRegPack.Volume, value);
        }



        
        /// <summary>
        /// Starts playing a sound.
        /// </summary>
        public void Play(string name)
        {
            this.SendCmdPacked((ushort)SoundPlayerCmd.Play, SoundPlayerCmdPack.Play, new object[] { name });
        }

        
        /// <summary>
        /// Cancel any sound playing.
        /// </summary>
        public void Cancel()
        {
            this.SendCmd((ushort)SoundPlayerCmd.Cancel);
        }

    }
}